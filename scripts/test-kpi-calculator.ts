import dotenv from 'dotenv';
import { KPICalculator } from '@/lib/kpi/calculator';
import { runMigrations } from '@/lib/db/migrate';

// Load environment variables
dotenv.config({ path: '.env.local' });

async function testKPICalculator() {
  console.log('üß™ Testing KPI Calculator...\n');

  try {
    // Ensure migrations are up to date
    console.log('1Ô∏è‚É£ Running database migrations...');
    await runMigrations();
    console.log('‚úÖ Database migrations completed\n');

    // Initialize calculator with mock data fallback
    const calculator = new KPICalculator();

    // Test 2: Full KPI Calculation
    console.log('2Ô∏è‚É£ Running full KPI calculation...');
    const snapshot = await calculator.runFullKPICalculation();
    
    console.log('\nüìä KPI Calculation Results:');
    console.log('==========================================');
    console.log(`üí∞ Cash on Hand: $${snapshot.kpis.cashOnHand.toLocaleString()}`);
    console.log(`‚è∞ Days Cash Runway: ${snapshot.kpis.daysCashRunway} days`);
    console.log(`üìà Yesterday's Revenue: $${snapshot.kpis.yesterdayRevenue.toLocaleString()}`);
    console.log(`üì¶ Units Shipped Yesterday: ${snapshot.kpis.unitsShippedYesterday}`);
    console.log(`üìÖ WTD Progress: ${snapshot.kpis.wtdProgress.percentage}% ($${snapshot.kpis.wtdProgress.actual.toLocaleString()}/$${snapshot.kpis.wtdProgress.target.toLocaleString()})`);
    console.log(`üìÖ MTD Progress: ${snapshot.kpis.mtdProgress.percentage}% ($${snapshot.kpis.mtdProgress.actual.toLocaleString()}/$${snapshot.kpis.mtdProgress.target.toLocaleString()})`);
    console.log(`üíπ Gross Margin: ${snapshot.kpis.grossMarginPercentage}%`);
    console.log(`üîÑ Last Updated: ${snapshot.kpis.lastUpdated.toISOString()}`);
    
    // Test 3: Alert System
    console.log('\n3Ô∏è‚É£ Testing alert thresholds...');
    if (snapshot.alerts.length > 0) {
      console.log(`üö® ${snapshot.alerts.length} Alert(s) Triggered:`);
      snapshot.alerts.forEach((alert, index) => {
        console.log(`   ${index + 1}. [${alert.type.toUpperCase()}] ${alert.message}`);
        console.log(`      Value: ${alert.value}, Threshold: ${alert.threshold}`);
      });
    } else {
      console.log('‚úÖ No alerts triggered - all metrics within acceptable ranges');
    }

    // Test 4: Database Persistence
    console.log('\n4Ô∏è‚É£ Testing database persistence...');
    const latestSnapshot = await calculator.getLatestKPISnapshot();
    if (latestSnapshot && latestSnapshot.id === snapshot.id) {
      console.log(`‚úÖ KPI snapshot successfully saved with ID: ${latestSnapshot.id}`);
      console.log(`   Snapshot Date: ${latestSnapshot.date.toISOString().split('T')[0]}`);
      console.log(`   Cash on Hand: $${latestSnapshot.kpis.cashOnHand.toLocaleString()}`);
    } else {
      console.error('‚ùå Database persistence test failed');
    }

    // Test 5: Performance Analysis
    console.log('\n5Ô∏è‚É£ Performance analysis...');
    const performanceInsights = [];
    
    if (snapshot.kpis.daysCashRunway < 30) {
      performanceInsights.push('‚ö†Ô∏è  Cash runway is concerning - consider reducing expenses or increasing revenue');
    }
    
    if (snapshot.kpis.grossMarginPercentage < 50) {
      performanceInsights.push('üìä Gross margin could be improved - review pricing and COGS');
    }
    
    if (snapshot.kpis.wtdProgress.percentage < 80) {
      performanceInsights.push('üìà WTD revenue tracking below 80% - sales acceleration needed');
    }
    
    if (snapshot.kpis.unitsShippedYesterday === 0) {
      performanceInsights.push('üì¶ No units shipped yesterday - check fulfillment pipeline');
    }

    if (performanceInsights.length > 0) {
      console.log('üìã Performance Insights:');
      performanceInsights.forEach((insight, index) => {
        console.log(`   ${index + 1}. ${insight}`);
      });
    } else {
      console.log('‚úÖ All performance metrics look healthy');
    }

    // Test 6: Data Source Validation
    console.log('\n6Ô∏è‚É£ Data source validation...');
    console.log(`üìä QuickBooks Data: ${snapshot.dataSource.quickbooks ? '‚úÖ Connected' : '‚ùå Unavailable'}`);
    console.log(`üõçÔ∏è  Shopify Data: ${snapshot.dataSource.shopify ? '‚úÖ Connected' : '‚ùå Unavailable'}`);

    console.log('\nüéâ All KPI Calculator tests completed successfully!');
    console.log('\nüí° Next Steps:');
    console.log('   - Set up automated KPI calculation (cron job)');
    console.log('   - Configure alert notifications (email/Slack)');
    console.log('   - Build dashboard UI to display these KPIs');
    console.log('   - Add trend analysis and forecasting');

  } catch (error) {
    console.error('‚ùå KPI Calculator test failed:', error);
    
    // Provide debugging information
    if (error instanceof Error) {
      console.error('\nüîç Debug Information:');
      console.error('   Error Type:', error.constructor.name);
      console.error('   Error Message:', error.message);
      if (error.stack) {
        console.error('   Stack Trace:', error.stack.split('\n').slice(0, 5).join('\n'));
      }
    }
    
    process.exit(1);
  }
}

// Run the test
testKPICalculator();